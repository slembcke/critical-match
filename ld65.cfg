SYMBOLS {
	NES_MAPPER: type = weak, value = 2; # mapper number UxROM
	NES_PRG_BANKS: type = weak, value = 1; # number of 16K PRG banks
	NES_CHR_BANKS: type = weak, value = 0; # number of 8K CHR banks
	NES_MIRRORING: type = weak, value = 0; # 0 horizontal, 1 vertical
}

MEMORY {
	#INES Header:
	HEADER: start = $0, size = $10, fill = yes;
	
	# CPU Addresses:
	ZEROPAGE: start = $0000, size = $100;
	OAM: start = $0200, size = $0100, define = yes;
	RAM: start = $0300, size = $0400, define = yes;
	CSTACK: start = $780, size = $0080, define = yes;
	# PRG0: start = $8000, size = $4000, fill = yes;
	# PRG1: start = $8000, size = $4000, fill = yes;
	# PRG2: start = $8000, size = $4000, fill = yes;
	# PRG3: start = $8000, size = $4000, fill = yes;
	# PRG4: start = $8000, size = $4000, fill = yes;
	# PRG5: start = $8000, size = $4000, fill = yes;
	# PRG6: start = $8000, size = $4000, fill = yes;
	PRG_MAIN: start = $C000, size = $3FD0, fill = yes;
	MAPPER28: start = $FFD0, size = $2A, fill = yes; # Used by mapper 28
	VECTORS: start = $FFFA, size = $6, fill = yes;
	
	# PPU Addresses:
	CHR: start = $0000, size = $2000, fill = yes;
}

SEGMENTS {
	HEADER: load = HEADER, type = ro;
	
	# PRG0: load = PRG0, type = ro, align = $100;
	# PRG1: load = PRG1, type = ro, align = $100;
	# PRG2: load = PRG2, type = ro, align = $100;
	# PRG3: load = PRG3, type = ro, align = $100;
	# PRG4: load = PRG4, type = ro, align = $100;
	# PRG5: load = PRG5, type = ro, align = $100;
	# PRG6: load = PRG6, type = ro, align = $100;
	
	# PRG MAIN
	STARTUP: load = PRG_MAIN, type = ro, define = yes;
	CODE: load = PRG_MAIN, type = ro, define = yes;
	RODATA: load = PRG_MAIN, type = ro, define = yes;
	MAPPER28: load = MAPPER28, type = ro, define = yes;
	VECTORS: load = VECTORS, type = ro;
	
	# RAM
	ZEROPAGE: load = ZEROPAGE, type = zp;
	BSS: load = RAM, type = bss, define = yes;
	DATA: load = PRG_MAIN, run = RAM, type = rw, define = yes;
	
	# CHR: load = CHR, type = ro, define = yes;
}
